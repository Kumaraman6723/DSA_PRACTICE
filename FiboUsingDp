import java.util.Arrays;

public class FiboUsingDp {
    public static void main(String[] args) {
        int n = 5;
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        System.out.println(fibo(n, dp));
        System.out.println(fibo2(n, dp));
        System.out.println(fibo3(n, dp));
    }
//using memoziation tc- o(n) sc-o(n)+o(n)
    static int fibo(int n, int[] dp) {
        if (n <= 1) {
            return n;
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        dp[n] = fibo(n - 1, dp) + fibo(n - 2, dp);
        return dp[n];
    }
    // tabulation tc- o(n) sc-o(n)
    static int fibo2(int n,int[] dp)
    {
        dp[0]=0;
        dp[1]=1;
        for (int i = 2; i <= n ; i++) {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    // to reduce space completely we use this 
    static int fibo3(int n,int[] dp)
    {
        if (n <= 1) {
            return n;
        }
        int prev2=0;
        int prev=1;
        for (int i = 2; i <=n ; i++) {
            int curi=prev+prev2;
            prev2=prev;
            prev=curi;
        }
        return prev;

    }
}
