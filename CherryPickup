import java.util.Arrays;

public class CherryPickup {
    public static void main(String[] args) {
        int[][] matrix = {{2, 3, 1, 2},
                          {3, 4, 2, 2},
                          {5, 6, 3, 5}};
        int n = matrix.length;
        int m=matrix[0].length;
        //System.out.println(maxCherry(matrix, 0, 0, matrix[0].length - 1,n, m));
        int[][][] dp = new int[n][m][m];
        for (int a[][]:dp)
        {
            for(int a1[]:a)
            {
                Arrays.fill(a1,-1);
            }
        }
        System.out.println(maximumChocolates(n,m,matrix));

    }
//recursion
    static int maxCherry(int[][] arr, int i, int j1, int j2,int n,int m) {

        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return (int)Math.pow(-10,9); // Corrected to return Integer.MIN_VALUE instead of -10^9
        }
        if (i == n - 1) {
            if (j1 == j2) {
                return arr[i][j1];
            } else {
                return arr[i][j1] + arr[i][j2];
            }
        }
        int maxi=Integer.MIN_VALUE;
        for (int dj1 = -1; dj1 <= 1; dj1++) {
            for (int dj2 = -1; dj2 <=1; dj2++) {
                int ans;

                if (j1==j2)
                {
                    ans=arr[i][j1]+maxCherry(arr,i+1,j1+dj1,j2+dj2,n,m);
                }
                else
                {
                    ans=arr[i][j1]+arr[i][j2]+maxCherry(arr,i+1,j1+dj1,j2+dj2,n,m);
                }
                maxi=Math.max(maxi,ans);

            }
        }
        return maxi;
    }
    //memoization
    static int maxCherry1(int[][] arr, int i, int j1, int j2,int n,int m,int[][][] dp) {

        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return (int)Math.pow(-10,9); // Corrected to return Integer.MIN_VALUE instead of -10^9
        }
        if (i == n - 1) {
            if (j1 == j2) {
                return arr[i][j1];
            } else {
                return arr[i][j1] + arr[i][j2];
            }
        }
        if(dp[i][j1][j2]!=-1)
        {
            return dp[i][j1][j2];
        }
        int maxi=Integer.MIN_VALUE;
        for (int dj1 = -1; dj1 <= 1; dj1++) {
            for (int dj2 = -1; dj2 <=1; dj2++) {
                int ans;

                if (j1==j2)
                {
                    ans=arr[i][j1]+maxCherry1(arr,i+1,j1+dj1,j2+dj2,n,m,dp);
                }
                else
                {
                    ans=arr[i][j1]+arr[i][j2]+maxCherry1(arr,i+1,j1+dj1,j2+dj2,n,m,dp);
                }
                maxi=Math.max(maxi,ans);

            }
        }
        dp[i][j1][j2]=maxi;
        return dp[i][j1][j2] ;
    }
    //tabulation
    static int maximumChocolates(int n, int m, int[][] grid) {
        // Create a 3D array to store computed results
        int dp[][][] = new int[n][m][m];

        // Initialize the dp array with values from the last row of the grid
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                if (j1 == j2)
                    dp[n - 1][j1][j2] = grid[n - 1][j1];
                else
                    dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
            }
        }

        // Outer nested loops to traverse the DP array from the second last row to the first row
        for (int i = n - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {
                    int maxi = Integer.MIN_VALUE;

                    // Inner nested loops to try out 9 options
                    for (int di = -1; di <= 1; di++) {
                        for (int dj = -1; dj <= 1; dj++) {
                            int ans;

                            if (j1 == j2)
                                ans = grid[i][j1];
                            else
                                ans = grid[i][j1] + grid[i][j2];

                            // Check if the indices are valid
                            if ((j1 + di < 0 || j1 + di >= m) || (j2 + dj < 0 || j2 + dj >= m))
                                ans += (int) Math.pow(-10, 9);
                            else
                                ans += dp[i + 1][j1 + di][j2 + dj];

                            // Update maxi with the maximum result
                            maxi = Math.max(ans, maxi);
                        }
                    }
                    // Store the result in the dp array
                    dp[i][j1][j2] = maxi;
                }
            }
        }

        // The final result is stored at the top row (first row) of the dp array
        return dp[0][0][m - 1];
    }

    }
