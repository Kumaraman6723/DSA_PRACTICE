public class GridUniquePathWithObstacle {
    public static void main(String[] args) {
        int[][] path = {
                {0, 0,0},
                {0, -1,0},
                {0, 0,0}

        };
        int[][] dp={
                {-1,-1,-1},
                {-1,-1,-1},
                {-1,-1,-1}
        };
        System.out.println(path(path,path.length-1,path[0].length-1));
        System.out.println(path1(path,path.length-1,path[0].length-1,dp));
        System.out.println(path2(path,path.length-1,path[0].length-1,dp));

    }
    //recursion
    static int path(int[][] arr, int row, int col) {
        if (row == 0 && col == 0) {
            return (arr[row][col] != 1) ? 1 : 0; // Consider obstacle at (0, 0)
        }
        if(row>=0 && col>=0 && arr[row][col]==-1)return 0;
        if (row < 0 || col < 0 ) {
            return 0; // If obstacle or out of bounds, return 0
        }
        int up = path(arr, row - 1, col);
        int left = path(arr, row, col - 1);
        return up + left;
    }

    //memoization
    static int path1(int[][] arr,int row,int col,int[][] dp) {
        if (row == 0 && col == 0) {
            return arr[row][col] == 0 ? 1 : 0; // If the start cell is blocked, return 0
        }
        if(row>=0 && col>=0 && arr[row][col]==-1)return 0;
        if (row < 0 || col < 0) {
            return 0;
        }
        if (dp[row][col] != -1) {
            return dp[row][col];
        }


        int up = path1(arr, row - 1, col, dp);
        int left = path1(arr, row, col - 1, dp);
        dp[row][col] = up + left;
        return dp[row][col];
    }
    //tabulation
    static int path2(int[][] arr,int row,int col,int[][] dp) {
        if(row<0 || col <0)
        {
            return 0;
        }

        for (int i = 0; i < row; i++) {

            for (int j = 0; j < col; j++) {
                int up=0,down=0;
                if(row>=0 && col>=0 && arr[row][col]==-1)return 0;

                if(i==0 && j==0){dp[0][0]=1;}
                else {
                   if(i>0) { up=dp[i-1][j];}
                    if(j>0) down=dp[i][j-1];
                    dp[i][j]=up+down;

                }
            }

        }
        return dp[row][col];
    }

}
