public class SudokuSolver {
    public static void main(String[] args) {
        char[][] board={ {3, 0, 6, 5, 0, 8, 4, 0, 0},
                {5, 2, 0, 0, 0, 0, 0, 0, 0},
                {0, 8, 7, 0, 0, 0, 0, 3, 1},
                {0, 0, 3, 0, 1, 0, 0, 8, 0},
                {9, 0, 0, 8, 6, 3, 0, 0, 5},
                {0, 5, 0, 0, 9, 0, 6, 0, 0},
                {1, 3, 0, 0, 0, 0, 2, 5, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 4},
                {0, 0, 5, 2, 0, 6, 3, 0, 0} };
        if(solve(board))
        {
            display(board);
        }
        else {
            System.out.println("cannot solve the board ");
        }

    }
    static boolean solve(char[][] board)
    {
        int n= board.length;
        int row=-1;
        int col=-1;
        boolean emptyLeft=true;
        //this is how we are replacing r,c from arguments
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <n ; j++) {
                if(board[i][j]==0)
                {
                    row=i;
                    col=j;
                    emptyLeft=false;
                    break;

                }
            }
            if(!emptyLeft)
                break;

        }
        if(emptyLeft)
        {
            return true;
            //sudoko is solved
        }
        //backtrack
        for (int number = 1; number <= 9; number++) {
            if(isSafe(board,row,col,number))
            {
                board[row][col]= (char) (number);
                if(solve(board)){
                    //found the answer

                    return true;}
                else {
                    board[row][col]=0;
                }
            }
        }
        return false;

    }

    private static void display(char[][] board) {
        for(char[] row:board)
        {
            for(int num : row)
            {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }

    static  boolean isSafe(char[][] board ,int row ,int col,int num)
  {//check the row
      for (int i = 0; i < board.length ; i++) {
          //check if the number is in the row
          if(board[row][col]==num)
          {
              return false;
          }

      }
      for (char[] nums :board) {
          //check if the number is in the col
          if(nums[col]==num)
          {
              return false;
          }

      }
      int sqrt =(int)(Math.sqrt(board.length));
      int start = row- (row%sqrt);
      int colStart = col -(col%sqrt);
      for (int i = start; i < start+sqrt; i++) {
          for (int c = colStart; c < colStart+sqrt; c++) {
              if(board[i][c]==num)
              {
                  return false;
              }

          }
      }
      return true;
  }

}
