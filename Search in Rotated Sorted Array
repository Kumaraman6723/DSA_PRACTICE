class Solution{
    public static void main(String[] args) {
        int[] arr = {3, 4, 5, 6, 7, 0, 1, 2};
        int target = 4;
        int result = search(arr, target);
        System.out.println("Element found at index: " + result);
    }

    static int search(int[] nums, int target) {
        int ans = findPivot(nums);

        if (ans == -1) {
            // If pivot is not found, it means it's a simple sorted array
            return binarySearch(nums, target, 0, nums.length - 1);
        }
        if(target==nums[ans])
        {
            return ans;
        }

        // Determine which part of the array to search in
        if (target >= nums[0]) {
            return binarySearch(nums, target, 0, ans);
        } else {
            return binarySearch(nums, target, ans + 1, nums.length - 1);
        }
    }

    static int findPivot(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid - 1;
            }
            if (arr[mid] <= arr[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

    static int binarySearch(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                return mid; // Element found, return the index
            }
        }

        return -1; // Element not found in the array
    }
}
