// In this we are searching element in an mountainn array first we find peak element in the aarray and with the help of it we first try to see the element is present before the peak element in the array i.e. ascending order and in second try we try to finf it if it is present after the peak element i.e. descending part of the array 
public class Searching_Element_In_A_Mountain_Array {
    
        public static void main(String[] args) {
            //it is similar to the finding peak element index in an mountain array

            int[] arr = {1, 2, 5, 6,7,8,9, 4, 3,2,1};
            int target=3;
            System.out.println(search(arr,target));
        }
        static int search(int arr[],int target)
        {
            int peakIndex = findPeak(arr);
            int firstTry=binarySearch(arr,target,0,peakIndex);
            int secondTry=binarySearch(arr,target,peakIndex+1,arr.length-1);
            if(arr[firstTry]==target)
            {
                return firstTry;
            } else if (arr[secondTry]==target) {
                return secondTry;

            }
            else
            {
                return -1;
            }

        }
        static int findPeak(int[] arr) {
            int start = 0;
            int end = arr.length - 1;

            while (start < end) {
                int mid = start + (end - start) / 2;

                if (arr[mid] > arr[mid + 1]) {
                    // We are on the decreasing side of the mountain.
                    // The peak is on the left side (including mid).
                    end = mid;
                } else {
                    // We are on the increasing side of the mountain.
                    // The peak is on the right side (excluding mid).
                    start = mid + 1;
                }
            }

            // The loop exits when start == end, which is the peak index.
            return start;
        }
        static int binarySearch(int[] arr, int target,int start,int end) {


            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (target < arr[mid]) {
                    end = mid - 1;
                } else if (target > arr[mid]) {
                    start = mid + 1;
                } else {
                    return mid;
                }
            }

            return 1;
        }
    }


