import java.util.Arrays;

public class NinjaTraining {
    public static void main(String[] args) {
        int[][] nums = {
                {10, 50, 1},
                {5, 100, 11}
        };
        System.out.println(func(nums.length - 1, 3, nums));
        int[][] dp = new int[nums.length][3];
        for (int[] a : dp) {
            Arrays.fill(a, -1); // Corrected to fill with -1
        }
        System.out.println(func1(nums.length - 1, 0, nums, dp));
        System.out.println(ninjaTraining(nums.length,nums));
        System.out.println(ninjaTraining1(nums.length,nums));

    }

    // recursion
    static int func(int day, int last, int[][] points) {
        if (day == 0) {
            int maxi = 0;
            for (int task = 0; task < 3; task++) {
                if (task != last) {
                    maxi = Math.max(maxi, points[0][task]);
                }

            }
            return maxi;
        }
        int maxi = 0;
        for (int task = 0; task < 3; task++) {
            if (task != last) {
                int point = points[day][task] + func(day - 1, task, points);
                maxi = Math.max(maxi, point);
            }

        }
        return maxi;
    }

    // dp using memoziation
    static int func1(int day, int last, int[][] points, int[][] dp) {

        if (day == 0) {
            int maxi = 0;
            for (int task = 0; task < 3; task++) {
                if (task != last) {
                    maxi = Math.max(maxi, points[0][task]);
                }

            }
            return  maxi;
        }
        if (dp[day][last] != -1) {
            return dp[day][last];
        }
        int maxi = 0;
        for (int task = 0; task < 3; task++) {
            if (task != last) {
                int point = points[day][task] + func1(day - 1, task, points, dp); // Fixed to use func1 instead of func
                maxi = Math.max(maxi, point);
            }

        }
        return dp[day][last] = maxi;

    }
    //dp using tabulation
    static int ninjaTraining(int n, int[][] points) {
        // Initialize a 2D array 'dp' to store the maximum points
        int[][] dp = new int[n][4];

        // Initialize the first day's maximum points based on the available choices
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        // Iterate through each day and each activity
        for (int day = 1; day < n; day++) {
            for (int last = 0; last < 4; last++) {
                dp[day][last] = 0; // Initialize the maximum points for the current day and last activity
                // Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {
                    if (task != last) { // Ensure that the current task is different from the last
                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        int activity = points[day][task] + dp[day - 1][task];
                        // Update the maximum points for the current day and last activity
                        dp[day][last] = Math.max(dp[day][last], activity);
                    }
                }
            }
        }

        // Return the maximum points achievable after all days (last activity is 3)
        return dp[n - 1][3];
    }
    //space optimization
    static int ninjaTraining1(int n, int[][] points) {
        // Initialize a 2D array 'dp' to store the maximum points
       int[] prev= new int[4];

        // Initialize the first day's maximum points based on the available choices
        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        // Iterate through each day and each activity
        for (int day = 1; day < n; day++) {
            int[] temp= new int[4];
            for (int last = 0; last < 4; last++) {
                temp[last] = 0; // Initialize the maximum points for the current day and last activity
                // Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {
                    if (task != last) { // Ensure that the current task is different from the last
                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        int activity = points[day][task] + prev[task];
                        // Update the maximum points for the current day and last activity
                        temp[last] = Math.max(temp[last], activity);
                    }
                }
            }
            prev=temp;
        }

        // Return the maximum points achievable after all days (last activity is 3)
        return prev[3];
    }
}
