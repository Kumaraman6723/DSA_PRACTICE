import java.util.Arrays;

class Solution {
    public boolean canPartition(int[] nums) {
        int totalSum = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            totalSum += nums[i];
        }
        if (totalSum % 2 != 0) {
            return false;
        }
        int[][] dp = new int[n + 1][totalSum / 2 + 1]; // Corrected dimensions
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1); // Initializing dp array
        }
        return subsetSumToK(n, totalSum / 2, nums); // Corrected function call
    }

    boolean subsetSumToK(int n, int k, int[] arr) { // Removed static keyword
        boolean dp[][] = new boolean[n + 1][k + 1]; // Corrected dimensions

        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        if (arr[0] <= k) {
            dp[0][arr[0]] = true;
        }

        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= k; target++) {
                boolean notTaken = dp[ind - 1][target];
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }
                dp[ind][target] = notTaken || taken;
            }
        }
        return dp[n - 1][k];
    }
}
