import java.util.Arrays;

public class MergeSortUsingRecursion {
    /*
    to implement merge sort
    first know that we divide the array into two halves using recursion and gets left and right side then after this we merge them again
    until the sorted array i.e mix is achieved
     */

    public static void main(String[] args) {
        int[] arr = {3, 4, 6, 7, 9, 10, 34, 2};
        arr = mergeSort(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }

    static int[] mergeSort(int[] arr) {
        if (arr.length <= 1) {
            return arr;
        }
        int mid = arr.length / 2;

        int[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid));
        int[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length));
        return merge(left, right);
    }

    private static int[] merge(int[] first, int[] second) {
        int[] mix = new int[first.length + second.length];
        int i = 0, j = 0, k = 0;

        while (i < first.length && j < second.length) {
            if (first[i] < second[j]) {
                mix[k] = first[i];
                i++;
            } else {
                mix[k] = second[j];
                j++;
            }
            k++;
        }

        while (i < first.length) {
            mix[k] = first[i];
            i++;
            k++;
        }

        while (j < second.length) {
            mix[k] = second[j];
            j++;
            k++;
        }

        return mix;
    }
}
